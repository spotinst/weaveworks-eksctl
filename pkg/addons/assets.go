// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/neuron-device-plugin.yaml (3.618kB)
// assets/nvidia-device-plugin.yaml (2.361kB)
// assets/spot-ocean-controller.yaml (9.421kB)
// assets/vpc-admission-webhook-config.yaml (524B)
// assets/vpc-admission-webhook-csr.yaml (234B)
// assets/vpc-admission-webhook-dep.yaml (1.106kB)
// assets/vpc-admission-webhook.yaml (231B)
// assets/vpc-resource-controller-dep.yaml (1.11kB)
// assets/vpc-resource-controller.yaml (565B)

package addons

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _neuronDevicePluginYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x56\xc1\x8e\xdb\x36\x10\xbd\xfb\x2b\x06\x0e\x72\xab\xa4\x6e\x5a\x14\x81\x7a\xda\x6c\x9c\x20\x68\xb2\x59\xc4\x4d\x2f\x45\x51\x8c\xc9\x91\xcc\x9a\x22\x59\x72\xe8\xb5\xf3\xf5\x05\x25\x59\x2b\xed\x2a\xee\x6e\xd1\x9e\xaa\x93\x64\xce\xbc\x19\x3e\xbe\x79\x74\x96\x65\x8b\x9d\x32\xb2\x84\x2b\x1d\x03\x93\xff\x64\x35\x2d\xd0\xa9\x5f\xc8\x07\x65\x4d\x09\x7e\x83\x22\xc7\xc8\x5b\xeb\xd5\x17\x64\x65\x4d\xbe\x7b\x19\x72\x65\x8b\xfd\xc5\xa2\x21\x46\x89\x8c\xe5\x02\xc0\x60\x43\x25\x18\x8a\xde\x9a\x4c\xd2\x5e\x09\xca\x9c\x8e\xb5\x32\x0b\x1f\x35\x85\x14\x93\x01\x3a\xf5\xd6\xdb\xe8\xda\xcf\xf4\x64\xb0\x5c\xb6\xaf\x9e\x82\x8d\x5e\xd0\x68\xc5\x58\x49\xa1\xfd\xda\x93\xdf\x8c\x16\x6a\xe2\xe1\x5d\xab\x70\xf7\x71\x8b\x2c\xb6\x4f\x2f\x44\x7b\x32\x3c\x5b\x49\x78\x42\xa6\xe1\xd3\xfd\x33\x7c\x67\xe5\x2c\x7a\x74\x72\x0e\xfd\xbf\xd9\x64\xcb\x66\x11\x18\x39\xce\x36\x33\xad\xde\xb7\x96\x04\x32\x96\xc3\xfe\xa2\xd7\xcb\x9a\x7c\x3a\xe2\x4b\x21\x6c\x34\xfc\x58\x25\x74\x8b\xc1\xa1\xa0\x12\x76\x71\x43\x59\x38\x06\xa6\x66\x31\x2b\xc4\x57\xca\x48\x65\xea\x7f\x5d\x8f\x5f\xed\xc2\x5b\x4d\x9f\xa8\x4a\xe9\x27\x6a\xcf\x54\x5c\x00\x3c\x9c\x9d\xb3\x85\x43\xdc\xfc\x41\x82\xfb\x59\x98\x25\x32\xb1\x7f\xb6\xf5\xb3\x14\x3e\x83\x2d\xb3\x0b\x65\x51\xa4\x15\x6f\x88\xa9\xe5\x46\x5a\x11\x0a\x61\x8d\x20\xc7\xa1\xa0\x03\x93\x91\xd9\x5d\x48\x21\x6c\xe3\x22\x53\x16\xd8\x7a\xac\x29\x33\xc4\xc5\xa4\x70\x28\x26\xa7\x80\xce\x85\x62\xd0\xc2\x6b\xa4\xc6\x9a\x35\x3d\x56\x06\x99\x6c\x13\x42\x2b\xf0\xaf\xec\x26\x38\x12\x09\x25\x90\x26\xc1\xd6\x77\x3a\x6d\x92\x46\xdf\xe3\x86\xf4\x20\xdc\x73\x65\x92\xce\x3b\x21\xaf\xd9\x23\x53\x7d\xec\xb2\xf8\xe8\xa8\x84\x4f\x56\x6b\x65\xea\xcf\xa7\x21\x64\x6a\x9c\x46\xa6\xbe\xd4\x68\x2b\xe9\x41\x63\x2c\xb7\xc7\x3f\x94\x06\x08\x62\x4b\x32\x6a\xf2\x39\x6a\xb7\xc5\x7c\xca\xba\xf0\x8a\x95\x40\x9d\x39\x2b\xcb\xd3\x64\x02\xe8\x49\xff\x7f\xbf\x03\x80\x13\x19\xed\xfb\x44\x2f\x67\x64\x02\xc0\x56\x93\xbf\xdf\x72\x06\x3b\x3a\x96\x70\xd5\xf7\x76\x29\xa5\x35\xe1\xa3\xd1\xc7\x21\x02\xc0\xba\x94\x67\x7d\x09\xab\x83\x0a\xbd\x33\x8e\x92\xf1\x36\xe4\xd8\xe0\x17\x6b\x72\x61\x9b\xa2\x6b\xe1\x31\xf9\x00\x54\x55\x24\xb8\x84\x6b\xbb\xee\xb9\xeb\x17\x9f\xc1\x07\xf4\x3b\xe0\xad\x0a\xc9\x2f\x01\x03\x20\x9c\x18\x04\x94\x32\xb3\xe6\x47\xb8\xdd\x92\x01\x32\xb8\xd1\x24\xbf\x01\xde\xd2\xfd\x90\x01\x6d\x38\x9a\xe4\x85\xe4\xf7\x14\xee\x4c\x11\x2a\xeb\xef\x27\xb6\x26\x0d\xc1\x02\x6f\x91\x13\xf2\x11\x04\xde\xc1\x6d\x28\xa5\xf7\x98\x12\xb0\x62\xf2\x80\x50\xa1\xd2\xd1\x53\x3e\xc4\xad\x89\xce\xcd\x20\x63\xd8\x85\x02\x65\xa3\x8c\x4a\x9e\x91\x89\xce\x3b\x8a\x3a\xa2\x47\xc3\x44\x32\xeb\xab\x28\x53\x67\x83\x82\x30\x1d\x53\xd2\x51\x28\xfa\x52\xce\x2b\xeb\x15\x1f\xaf\x34\x86\x70\xdd\x4a\x68\xd9\xcd\x4e\x96\x9c\x7e\x48\x3d\xa9\x0e\xab\x4a\x19\xc5\xc7\x91\xee\xac\xa4\xcb\x07\xbf\xa6\xbb\xe3\xcf\xa8\x3c\xc9\xd7\xd1\x2b\x53\xaf\x87\x6e\xde\xd5\xc6\x0e\x3f\xaf\x0e\x24\x62\x92\xd6\x38\xb3\xc3\x5c\xf7\x23\xfb\x33\xf9\x26\x4c\x97\x93\x82\xda\x19\x5e\x1d\x9c\xa7\x10\xa6\xd2\x1c\x47\xb5\x3a\x5b\x6e\x88\xef\x0f\x95\x32\x81\xd1\x08\xca\xd2\x10\x2f\x67\x72\xc7\xf2\x7b\x67\x66\x03\xf6\xa8\x23\xcd\x16\xee\x8a\x2b\x53\x5d\xe4\x07\x8d\xbe\xa6\xf3\x31\x2f\x1e\x13\xf4\xc3\xa3\x90\xbe\x9f\x8d\x7a\x1a\x5d\x89\xfd\xff\x25\x5d\xc2\x1a\x46\x65\xc8\x4f\x8c\x4e\x35\x58\xa7\xb1\x78\x1e\x72\xb9\xf3\x39\x09\x9f\x3f\x0f\xf9\xf3\x50\xcc\x79\x66\x79\x91\x7f\x97\xbf\xc8\xbf\x1d\x73\xd4\x02\xdc\x44\xad\x6f\xac\x56\xe2\x58\xc2\xa5\xbe\xc5\xe3\xd8\xce\x3a\xef\xde\xbd\x0c\xd9\xac\x7f\x0b\xf6\x63\xef\x33\xfb\x29\x89\x59\x9f\xff\xd3\xe7\x57\xab\xab\x8f\xd7\x6f\xde\xbd\x5d\xcc\x30\x5f\x42\x41\x2c\x46\x6e\xd2\xbe\x6a\xe2\x5c\x58\x53\xcd\x02\x5e\x7f\x7c\xbd\xfa\xfd\xfa\xf2\xc3\x6a\x0e\xef\x8d\xb7\xcd\xc3\xc3\xac\x14\x69\xd9\xff\xf9\x99\x5d\xbb\x41\xde\x96\xed\x55\x94\x27\x9d\x25\xcb\x19\x85\x06\x12\xb1\xb5\x23\x6b\x98\x0e\x3c\x45\x41\xad\xed\xed\x8d\x57\x7b\xa5\xa9\xa6\x55\x10\xa8\xdb\x6b\xa9\x84\x0a\x75\x98\x1e\xb5\x40\x87\x1b\xa5\x15\xab\x87\x92\x93\xde\xba\x12\x7e\x5d\x5e\xbe\x7f\xbf\xfc\x6d\xb4\xb6\xb7\x3a\x36\xf4\x21\x5d\x88\x61\x9e\xe1\xb9\xeb\xf1\xf4\x34\x29\xaf\xdb\x5d\xb1\x47\x5f\x68\xb5\x39\x31\x7c\xef\x4f\xd0\x2c\xb4\x32\x15\x66\x0d\xba\x33\xa8\x3e\x9e\x6a\x76\x9d\x4e\x54\x7a\xbe\xc1\xad\x0d\x1d\xca\x04\xde\x3d\xa9\xdb\x33\x9d\x9e\x85\x4f\x6d\xff\x15\x00\x00\xff\xff\xd2\xc9\xf3\xad\x22\x0e\x00\x00")

func neuronDevicePluginYamlBytes() ([]byte, error) {
	return bindataRead(
		_neuronDevicePluginYaml,
		"neuron-device-plugin.yaml",
	)
}

func neuronDevicePluginYaml() (*asset, error) {
	bytes, err := neuronDevicePluginYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "neuron-device-plugin.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1d, 0x76, 0xf5, 0x81, 0xb9, 0x6f, 0x3e, 0x8, 0x73, 0x5c, 0xd3, 0xcd, 0xca, 0x64, 0x21, 0xed, 0x91, 0x66, 0x61, 0xfe, 0xec, 0x6e, 0xdf, 0x4c, 0xf4, 0x18, 0x25, 0x62, 0x19, 0xd7, 0x40, 0xf}}
	return a, nil
}

var _nvidiaDevicePluginYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x55\x41\x8f\xdb\x36\x13\xbd\xeb\x57\x3c\xd8\x97\x04\x58\x49\x9b\x5c\xbe\xaf\x0a\x7a\x70\x77\xb7\xa8\x91\x8d\x1d\xac\x37\x09\x82\xa2\x87\x31\x39\x96\x08\x53\x24\x4b\x52\xf6\xea\xdf\x17\x94\xb5\x5e\x2b\x05\x9a\x9c\x0a\x54\x17\x1b\xd2\x9b\x99\x37\x6f\xde\x90\x73\xdc\x58\xd7\x7b\x55\x37\x11\xaf\xc4\x6b\xbc\xbd\x7e\xf3\xd3\x15\x56\x9f\x97\xb7\xcb\x05\x6e\xd6\x0f\x1f\xd7\x0f\x8b\xc7\xe5\x7a\x55\x00\x0b\xad\x31\x00\x03\x3c\x07\xf6\x07\x96\x45\x36\xcf\xe6\xb8\x57\x82\x4d\x60\x89\xce\x48\xf6\x88\x0d\x63\xe1\x48\x34\xfc\xfc\xe5\x0a\x9f\xd9\x07\x65\x0d\xde\x16\xd7\x78\x95\x00\xb3\xf1\xd3\xec\xf5\xbb\x6c\x8e\xde\x76\x68\xa9\x87\xb1\x11\x5d\x60\xc4\x46\x05\xec\x94\x66\xf0\x93\x60\x17\xa1\x0c\x84\x6d\x9d\x56\x64\x04\xe3\xa8\x62\x33\x94\x19\x93\x14\xd9\x1c\x5f\xc7\x14\x76\x1b\x49\x19\x10\x84\x75\x3d\xec\xee\x12\x07\x8a\x03\xe1\xf4\x34\x31\xba\xaa\x2c\x8f\xc7\x63\x41\x03\xd9\xc2\xfa\xba\xd4\x27\x60\x28\xef\x97\x37\x77\xab\xcd\x5d\xfe\xb6\xb8\x1e\x42\x3e\x19\xcd\x21\x35\xfe\x67\xa7\x3c\x4b\x6c\x7b\x90\x73\x5a\x09\xda\x6a\x86\xa6\x23\xac\x07\xd5\x9e\x59\x22\xda\xc4\xf7\xe8\x55\x54\xa6\xbe\x42\xb0\xbb\x78\x24\xcf\xd9\x1c\x52\x85\xe8\xd5\xb6\x8b\x13\xb1\x9e\xd9\xa9\x30\x01\x58\x03\x32\x98\x2d\x36\x58\x6e\x66\xf8\x65\xb1\x59\x6e\xae\xb2\x39\xbe\x2c\x1f\x7f\x5b\x7f\x7a\xc4\x97\xc5\xc3\xc3\x62\xf5\xb8\xbc\xdb\x60\xfd\x80\x9b\xf5\xea\x76\x99\x06\xb5\xc1\xfa\x57\x2c\x56\x5f\xf1\x7e\xb9\xba\xbd\x02\xab\xd8\xb0\x07\x3f\x39\x9f\xf8\x5b\x0f\x95\x64\x1c\x46\x87\x0d\xf3\x84\xc0\xce\x9e\x08\x05\xc7\x42\xed\x94\x80\x26\x53\x77\x54\x33\x6a\x7b\x60\x6f\x94\xa9\xe1\xd8\xb7\x2a\xa4\x61\x06\x90\x91\xd9\x1c\x5a\xb5\x2a\x52\x1c\xde\xfc\xad\xa9\x22\xcb\xc8\xa9\x71\xfc\x55\xd2\x2c\x94\x87\x37\xd9\x5e\x19\x59\xe1\x96\xb8\xb5\x66\xc3\x31\x6b\x39\x92\xa4\x48\x55\x06\x18\x6a\xb9\x82\x39\x28\xa9\x28\x97\x7c\x50\x82\x73\xa7\xbb\x5a\x99\x5c\x0e\x01\x81\xe3\x08\x0b\x8e\x04\x57\xd8\x77\x5b\xce\x43\x1f\x22\xb7\x59\xe2\x9e\xb2\x04\xd6\x2c\xa2\xf5\xe9\x3f\xd0\x52\x14\xcd\x3d\x6d\x59\x87\xd3\x8b\x7f\x2e\x13\x32\xa0\x73\x92\x22\x6f\xa2\xa7\xc8\x75\x7f\x8a\x8a\xbd\xe3\x0a\x0f\x56\x6b\x65\xea\x4f\x03\x20\x03\x22\xb7\x4e\x53\xe4\xb1\xd4\x45\x2b\xe9\x99\xe3\x31\xb9\x99\x8c\xb1\x27\x95\x86\x39\xb3\xf3\x2c\x28\xb2\x2c\xf0\x3e\x19\xbc\x61\x7f\xd2\x7f\x4b\x62\x7f\x24\x2f\x07\xbf\x53\x54\x5b\xa5\x55\xec\xcf\xb9\xd2\xc8\x92\x75\x43\x55\x96\xa9\x6d\x6f\x38\x72\x28\x94\x2d\xa5\x15\xa1\x8c\x14\xf6\xa1\x24\xd9\x2a\xa3\x42\x64\x9f\x0b\xdd\xa5\xdf\xb2\xee\xc8\x93\x89\xcc\x32\x0f\xa2\x61\xd9\xa5\x0e\x72\x91\x3c\x2a\x48\xe7\x24\xa5\x35\xb9\xb3\x32\x94\x63\xa9\x17\xbe\x67\xc5\x80\x31\x94\x7d\x41\xda\x35\x54\x4c\x19\x9c\xb3\x39\x2b\x2b\xcc\x66\x63\x98\x9e\xc8\xfe\x7d\xe1\x81\xe7\x19\x0e\x92\x5b\xcd\x7e\xca\x63\x54\xf4\xe5\xcb\x7f\x43\xd1\x1c\x7b\xee\x2b\xdc\x8c\x88\x45\x02\x84\xb5\xd1\xfd\x59\x19\xeb\x52\x43\xd6\x57\xb8\x7b\x52\x21\x86\x69\xe0\x49\xb1\x42\xd8\xb6\xac\x5d\xf7\xbd\x20\x80\x77\x3b\x16\xb1\xc2\xca\x6e\xc6\xb1\x9d\x7b\xfe\x40\x7e\x7f\x3a\x64\x9d\x95\xa0\x90\x8e\xcb\x91\x16\x48\xca\xdc\x9a\x77\x38\x36\x6c\xc0\x26\x9d\x6f\xf2\x6a\x58\xe9\x6f\x20\xe7\x6c\x67\x57\x3c\xdf\x0b\xc3\x05\x61\x3b\x2f\x38\x0c\x13\xf8\x26\x30\x15\x0d\x08\x16\xb1\xa1\x98\x32\xf7\x10\xf4\x92\x6e\xcb\x29\x7c\xcc\x29\x41\xbb\xc8\x1e\x84\x1d\x29\xdd\x79\x2e\xfe\xfd\xc1\x39\xaf\xac\x57\xb1\xbf\xd1\x14\xc2\x6a\x70\xef\xec\x74\xda\xe4\xc6\x4a\x3e\x87\x3e\x1b\x5e\x58\x93\xee\x20\xf6\x67\xc7\xe6\x50\x2d\xd5\x67\xd7\x97\xfb\xff\x87\xa9\xf3\xab\xc3\x75\xf1\xbf\xe2\xfa\x47\x76\x44\x44\x7f\x86\x91\xaf\x43\x85\xdf\x67\x79\x9e\xd4\xc9\xad\xc9\x95\x51\x31\x67\xef\xad\xff\x79\x47\x3a\xf0\xec\x8f\x97\xe5\x65\xd1\x0d\x6d\x58\x13\xf9\x29\xbe\x2c\x24\x40\x5a\xdb\xe3\x47\xaf\x0e\x4a\x73\xcd\x77\x41\x90\x1e\x16\xab\xc2\x90\xe4\x02\x29\xc8\xd1\xb0\x40\x8a\xc3\x65\x06\x40\x7a\xeb\x12\x97\xc5\xfd\xfd\x45\xd1\x83\xd5\x5d\xcb\x1f\x6c\x67\xe2\x04\x9f\x8f\x2d\x4e\x7a\x9b\xe4\x6b\x53\xcc\x47\x8a\x4d\x85\xf2\x40\xbe\xd4\x6a\x3b\x8c\x59\x73\x2c\x27\x51\xcf\x8e\x3f\x95\xba\xa8\xf2\xbd\x1a\x8d\x0d\xa7\x02\x93\xba\xee\x87\x4a\x66\x7f\x05\x00\x00\xff\xff\x31\x6e\xa1\x29\x39\x09\x00\x00")

func nvidiaDevicePluginYamlBytes() ([]byte, error) {
	return bindataRead(
		_nvidiaDevicePluginYaml,
		"nvidia-device-plugin.yaml",
	)
}

func nvidiaDevicePluginYaml() (*asset, error) {
	bytes, err := nvidiaDevicePluginYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "nvidia-device-plugin.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc4, 0x9d, 0xa, 0xb7, 0x22, 0x67, 0xb3, 0x61, 0xf5, 0x37, 0x17, 0x90, 0x53, 0x59, 0x85, 0x25, 0xc7, 0x1, 0x1d, 0x96, 0x1, 0x51, 0xd5, 0x17, 0xea, 0x87, 0x44, 0x28, 0xc8, 0x3a, 0x53, 0xfc}}
	return a, nil
}

var _spotOceanControllerYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x5f\x73\xe2\x38\x12\x7f\xe7\x53\xa8\x72\x2f\x77\x55\x6b\x92\xec\xee\xd5\x6d\xf9\x8d\x01\x76\x8e\x9a\x2c\xa1\x80\xec\xdd\xd6\xd5\x14\x25\xe4\xb6\xd1\x22\x4b\x1a\xfd\x21\xf1\x7d\xfa\x2d\xc9\x18\x1b\x8c\x33\x98\x24\x24\x7a\xc2\xfa\xd3\xdd\xbf\xee\x9f\x5a\x2d\x11\x04\x41\x07\x4b\xfa\x3b\x28\x4d\x05\x0f\xd1\xe6\xb6\xb3\xa6\x3c\x0a\xd1\x0c\xd4\x86\x12\xe8\x11\x22\x2c\x37\x9d\x14\x0c\x8e\xb0\xc1\x61\x07\x21\x8e\x53\x08\x91\x96\xc2\x50\xae\x4d\xb0\xb6\x4b\x50\x1c\x0c\xe8\x80\x30\xab\x0d\xa8\x80\x08\x6e\x94\x60\x0c\xd4\x76\xba\x96\x98\x40\x88\xdc\xd4\x40\x67\xda\x40\xda\x39\xd4\xac\x96\x98\x74\xb1\x35\x2b\xa1\xe8\xff\xb1\xa1\x82\x77\xd7\xbf\xe8\x2e\x15\xd7\x3b\x9b\xfa\xb9\xf8\xa9\x60\x70\xbe\x41\xca\x32\xd0\x6e\xd5\xdf\x50\xf0\x8a\xcd\x0b\x9c\xc2\x37\x4b\x15\x44\x28\x16\x0a\xc5\x96\x13\x07\x03\x33\x24\x24\x28\x0f\x09\xfd\x5d\x01\x8e\x02\xc1\x59\xf6\x8f\xee\xeb\xdb\x10\x20\x2c\xe9\x67\x25\xac\xd4\x21\xfa\xdf\xd5\xd5\xd7\x0e\x42\x0a\xb4\xb0\x8a\x80\xef\x91\x22\xd2\x57\x3f\xa0\x2b\x2e\x22\xf0\x3f\x74\x1e\xe6\xbc\xb3\x08\x94\xff\x52\x20\x19\x25\xde\xea\xd2\x7b\x7e\x84\xd1\x94\x1a\x85\x79\x92\x4f\x84\x0d\x70\xe3\x7f\x49\x17\x4b\x6d\x80\x9b\x8d\x60\x36\x85\xa3\x9d\x84\x61\x9a\x6a\x6f\xda\x06\xd4\xd2\x9b\x95\x80\xc9\x05\x6b\x73\xf5\xf5\x10\x05\x96\x52\xd7\x91\x44\x20\x99\xc8\xd2\x42\x75\x84\x21\x15\x5c\x43\xfe\xa5\x0d\x36\x10\x5b\x56\x7c\x6f\xb1\xf8\xcf\xba\xe2\x06\xbd\xda\x08\x85\x13\xd8\xb2\xb0\x6e\xc1\x76\x9c\x30\xac\x35\xb4\x01\xb4\xc4\x86\xac\xea\xf2\xfe\x14\xcb\x36\x52\xe0\xc9\x00\x77\x5b\xe7\x88\x73\xaa\x78\xf7\x9d\x73\x32\x7a\x29\x18\x25\xd9\x51\x06\x45\x54\x2b\x2b\x1d\x31\x96\x36\x4a\x8e\x4b\x6d\xb2\x3a\x05\xa3\x28\xd1\x8d\x4e\xf5\x04\x6d\xc1\x0d\x6b\x84\x26\x98\x51\x9e\xd4\x65\xf9\x4c\x22\xb8\xc1\x4c\x8a\xa8\x98\xe9\x38\xdc\x86\x7b\xb4\xf4\x73\xa3\xd1\xc4\x6a\x23\xd2\xa2\x2b\x82\x98\x72\x6a\x76\x91\x69\xd4\xc4\x05\x9f\x6e\xd7\x3c\x4c\xef\xfc\x94\xeb\x4d\x9e\x0e\xaf\xdd\xc4\xe2\xa3\x2e\xe5\xeb\x1b\xa7\xaf\x65\x86\xcc\x0a\x50\xa4\x30\xe5\x94\x27\x28\x06\x6c\xac\x02\x84\x79\x73\x6a\x7b\x8f\x74\x96\xa7\xb1\x3d\xf7\x48\xbf\xb9\x7e\x40\x57\x56\x46\xd8\x40\x3d\xa4\xa7\x70\x2e\x02\x06\xa7\xaf\xbd\x86\x0d\xf5\xee\xd8\x17\x42\x14\xe4\x06\x5c\x24\x56\x33\x29\x0c\xea\x33\xc0\xdc\xca\x22\x5e\x1f\x24\x24\x3b\x6f\x5e\xd0\x11\xb3\x69\x80\xa5\x54\x62\x83\xd9\xe5\xbc\x41\x40\x19\x1a\xbb\x43\x13\x9e\x49\x16\x95\x49\x34\x71\xdb\x4b\xc1\x37\x0b\xba\x55\x1a\x7d\xa1\xa6\xeb\xc2\x37\x2d\xf7\xce\x49\x6a\x9d\xae\x22\xcb\x16\x03\x63\x57\x5a\xb8\xc1\xb2\x36\x73\x95\x9d\xfb\x62\x60\x02\x5f\x85\xf0\xc4\xa9\xae\x4f\x08\xb0\xa4\x6e\x82\x2b\xe3\x18\x05\x9e\x17\x78\x6c\x9b\x06\x77\xc6\xe7\x90\x2e\x4b\xb3\x9e\x35\x22\xc8\x9d\x75\x39\x96\x35\x16\xca\x47\x18\x90\x97\xbf\x4a\x30\x68\x88\xc7\x69\x45\xf3\xf3\x34\x71\x35\xa0\x3b\x5a\x8f\x52\xe6\xfb\xd5\xdb\x6b\xdb\x55\xb2\xf7\x82\x44\x90\x92\x65\x97\xa3\x40\xdb\x92\xb8\x31\xb1\xb8\xfa\xbc\x1e\xcd\xed\xc9\xe5\x64\x34\x1c\x84\xcf\x15\x9f\x6f\xa9\xb7\x6d\xc1\x78\xae\x9e\xb3\x4a\xf4\x93\x95\xbd\x39\x2f\x67\xdb\xdd\x83\xfe\x83\x37\x17\xa0\xa3\x96\x58\xad\xf3\x42\x50\xa8\xe6\x73\xc1\xcd\xc2\x72\x77\xab\xcc\x6f\x6a\x64\x05\x91\x65\x10\xd5\x47\x4f\x3f\x0d\x1f\x1d\x4a\x97\x31\x4e\xd7\xeb\x96\x10\x91\x4a\xc1\x8b\xed\xe2\x7a\x80\x6f\xa8\x12\xbc\xcc\x4b\x4d\xfa\x5f\xf4\x76\xf1\x89\xf2\x88\xf2\xe4\x05\x4f\x18\x82\xc1\x14\x62\xb7\xae\xf0\xc3\x33\x36\x74\x10\xaa\x3f\x9f\xb4\xd4\xa8\xed\xf2\x4f\x20\x46\x87\x9d\x00\x1d\x7d\x1f\x7a\xab\x57\x21\x97\xe9\x4a\x27\x0e\x76\x19\x6e\xcf\x79\x0c\x2f\x81\xf9\x37\x1d\x84\xd6\xbf\x68\x57\xf9\xb5\xb4\xe4\xe5\x86\x6b\x09\x24\xf4\xd4\xcb\xaf\xde\x21\xba\xf5\x5f\x1b\xea\x80\xfc\x9b\x6a\x23\x54\x76\x47\x53\x6a\x42\x74\x7b\xd3\x41\x48\x03\x03\x62\x84\xca\xcd\x4e\x5d\xe2\xb8\xab\xe0\x38\x07\x89\x81\x54\xba\x53\x78\x2b\xb2\xe2\x21\xd7\xd8\x9e\xf4\x73\xe4\x23\x54\xa0\x74\x4d\x2a\x2a\x14\x35\x59\x9f\x61\xad\xc7\xb9\x13\xbd\x2f\xca\xc5\x8a\x1a\x4a\x30\xdb\x2e\xc0\xb1\xbf\x18\x67\xa5\x09\xee\xb2\xd0\xab\xf5\x3a\xb7\xe5\xb9\x6c\x60\x15\xe5\xc9\x2c\xcf\x11\x94\x27\xa3\x84\x8b\x5d\xf7\xf0\x09\x88\x75\x3c\xaf\xae\xcc\x65\xce\xb6\xbe\x9d\x83\x4a\xf5\xfe\x70\x90\xbb\x7a\xf8\x24\x15\x68\x7f\x82\xed\x8f\xbb\x19\x6b\xc8\xf2\xe0\x96\x85\xa8\xd0\x07\xb3\x10\x2a\x12\x5e\x88\xc6\xc2\x8c\x78\x6d\x7c\x83\x99\x85\x9a\x74\x27\xff\x91\xf2\x48\x3c\x56\x25\x4a\x05\x31\xa8\xb3\x10\x07\xe8\x11\x68\xb2\xf2\xb4\xba\xd9\x53\x96\x0b\x05\x4e\xe0\xd0\x88\x13\x5d\xe0\x5c\x19\xb8\x64\xd3\xdd\x77\x46\x8a\x5d\x78\x9f\x71\xc8\xf0\x89\x6a\x53\xe2\x93\x22\xea\x71\x43\x8f\x45\xfa\x55\x80\xff\xf3\x00\xb7\x88\x0a\x55\x8e\x00\x87\xe0\xfc\x3e\x98\xed\xed\xbe\x36\xbe\x29\x09\x92\xef\x9f\xda\x70\xd5\x11\x47\x68\xd1\x4c\x0c\x27\xb9\xc5\x5e\x2c\x9b\x11\x52\x30\x91\x64\x5f\xea\xbc\x5d\x09\x6d\x5c\xc6\xda\xae\x70\x22\x30\x75\xd7\xb3\x42\x7d\xd0\x36\xff\xe5\x8d\xa6\x38\x81\x89\x65\x6c\xe2\xdf\x09\x43\xd4\x63\x8f\x38\xd3\xfb\xe3\xa5\xd4\xeb\x67\xa5\x86\xb7\xdd\x9b\xee\xbf\x7e\xda\x2d\x66\x74\x03\x1c\xb4\x9e\x28\xb1\xdc\xe3\xee\xca\x18\xf9\x19\xcc\xbe\xeb\x24\x36\xab\x10\x5d\xaf\x00\x33\xb3\x22\x2b\x20\xeb\x03\x36\x28\x13\xa2\x9f\x7f\xbe\xb9\xad\x74\xfb\x07\x3a\xcc\x06\xc0\x70\x36\x03\x22\x78\xa4\x43\xf4\xd3\xde\xfe\x91\xa0\xa8\x88\x76\x83\x3f\x56\xc7\x0c\x4d\x41\x58\x53\x0e\x56\xc6\xb4\x25\x04\xb4\x9e\xaf\x14\xe8\x95\x60\x51\x7e\x10\x14\x2d\xc6\x94\x59\x05\x95\xd1\x12\xb6\x02\x1c\xd1\x77\xc0\xfd\xe3\xfb\xc2\x06\xbe\x29\x81\x15\x74\x9c\x4d\xee\xe7\xa3\xf1\x6c\xbe\x98\xdf\x7f\x19\x8e\x2b\x92\xfc\xe6\xf9\x55\x89\x83\x6d\xad\x81\x28\x30\x5f\x20\xdb\xd6\x45\xd5\x76\x16\xc1\xf3\xe6\x37\xba\x11\x6b\x38\xdc\xc7\x42\xe6\xef\x9f\x21\x32\xca\x42\xb3\xf9\xbd\x7e\xff\xfe\x61\x3c\x7f\x5f\x00\x78\x57\xa4\x9d\x03\xc1\x47\x60\x71\x37\xfc\xdc\xeb\xff\xf1\x7d\x1c\x44\xf0\x98\x26\xbf\x61\xf9\x72\x28\x41\x2e\xeb\x18\xa2\x42\x40\xf7\x15\x62\xf3\x51\xa1\x9d\x15\xb5\xfe\xdd\xc3\x6c\x3e\x9c\x2e\x46\x83\xe1\x78\x3e\xfa\x75\x34\x9c\x7e\x38\x5c\xc5\x2a\x1a\x01\x37\x34\xa6\x15\xce\x16\x28\x06\xa3\x59\xef\xd3\xdd\x70\xd1\x7b\x98\xdf\x2f\x1e\x26\x83\xde\x7c\xf8\x51\x60\x44\x54\xe3\x25\x83\x00\x97\x4f\x7f\xed\x22\x34\x1c\x7b\x68\xfd\xd9\x74\xd1\x9b\x4c\xa6\xf7\xbf\xf7\xee\x3e\x0a\x36\xe0\x1e\x1a\xd1\x6a\xf7\x78\xde\x0e\xdb\x64\x7a\xff\xdf\x3f\x16\x0f\xd3\x0f\x83\x48\x2a\xf1\x94\x05\x56\xb5\xc4\xf1\xa9\x37\x1b\x2e\x76\x79\xe2\x03\xe1\x59\x62\x0d\xed\xe1\x4c\xee\x07\x8b\xd1\xe0\xfb\x18\x62\x0a\x2c\x3a\x62\xbc\xef\x9f\xf8\x72\xa3\xb8\x54\x76\x2d\x8d\x8e\xea\x19\xf7\x7e\x3b\x61\xaf\xb6\xd1\x54\x29\x5f\xeb\xaa\x66\x93\x5e\xff\x0d\xf4\xf9\x0b\xfe\x76\xae\xde\x7b\xe9\x18\xb7\x3f\x8b\x23\xae\x8b\x2a\x79\x00\x31\xb6\xac\xc8\xe9\x46\xb0\xed\x9f\xa7\x95\x72\x7c\x77\xf3\x3a\xb8\x74\x71\x61\x02\x57\x21\x66\x65\xe1\x14\xc7\x40\x8c\xbb\x7e\xe6\xf7\xa3\xd2\x4b\x8d\x37\xb1\x52\xe3\xae\x88\xbb\xdd\xdd\x9e\x9a\x75\x5b\xae\x00\x93\x95\xcb\x0e\x97\xd0\x7e\xc2\x9d\xb3\xa6\x23\x08\x82\xce\x5f\x01\x00\x00\xff\xff\x09\xac\x6b\xf0\xcd\x24\x00\x00")

func spotOceanControllerYamlBytes() ([]byte, error) {
	return bindataRead(
		_spotOceanControllerYaml,
		"spot-ocean-controller.yaml",
	)
}

func spotOceanControllerYaml() (*asset, error) {
	bytes, err := spotOceanControllerYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "spot-ocean-controller.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x13, 0x70, 0x77, 0xad, 0x7c, 0xf9, 0x6e, 0x79, 0xb8, 0x42, 0xb8, 0x69, 0xb, 0x9c, 0x45, 0xb9, 0x97, 0xe8, 0x7e, 0xe2, 0x87, 0xd4, 0xc, 0x99, 0x32, 0xb8, 0xec, 0x46, 0xee, 0x24, 0x3e, 0xf4}}
	return a, nil
}

var _vpcAdmissionWebhookConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x91\x4f\x6b\xf3\x30\x0c\xc6\xef\xf9\x14\x22\xf7\xa4\xf4\xf6\xe2\xdb\x4b\x29\x63\x87\xc1\x18\x63\x3b\x8c\x1d\x14\x47\x4d\x45\x62\xcb\x58\x76\x4a\xf7\xe9\x47\xfe\xb4\xac\xb0\xd5\x17\xdb\x7a\xa4\xdf\x63\xc9\x18\xf8\x8d\xa2\xb2\x78\x03\xd8\x3a\xd6\xe9\x18\xa9\x63\x4d\x11\x13\x8b\xaf\xfb\x7f\x5a\xb3\x6c\xc6\x6d\x43\x09\xb7\x45\xcf\xbe\x35\xf0\x94\x13\x26\xf6\xdd\x3b\x35\x47\x91\x7e\x27\xfe\xc0\x5d\x5e\x2a\x0a\x47\x09\x5b\x4c\x68\x0a\x00\x8f\x8e\x0c\x8c\xc1\x56\x57\x7a\x75\x5a\x8a\x2a\x7b\xe8\xd6\x0c\x0d\x68\xc9\x40\x9f\x1b\xaa\xf4\xac\x89\x5c\x01\x30\x60\x43\x83\x4e\x10\x00\x0c\xe1\x0f\x4a\xb1\xee\x73\x62\x75\xcf\xaf\x46\x87\x5f\xe2\xf1\xa4\xb5\x15\x37\x63\xed\xc0\xe4\xd3\xf2\xfa\xc5\x08\x40\x29\x8e\x6c\xe9\x72\xbd\xdb\xc2\x4d\xce\xaf\x4d\x2c\x2b\x60\x3a\x1a\x28\x37\x6e\x1a\x1b\x95\x73\x3c\xe6\x81\xf4\xe2\x52\x81\x04\x5a\xc6\xa7\x06\x3e\xa0\xdc\xbd\xec\xff\xbf\xee\x4b\xf8\xbc\x32\x30\xf0\x43\x94\x1c\x26\xbd\x2c\x6f\xe2\xeb\x0f\xce\xca\xb8\xfd\xa1\x45\x52\xc9\xd1\xd2\xac\x04\x69\x75\xd5\x0e\xc8\x43\x8e\xf4\x2c\x03\xdb\xb3\x81\xc7\xce\x4b\xa4\xe2\x3b\x00\x00\xff\xff\x49\xee\x9e\x02\x0c\x02\x00\x00")

func vpcAdmissionWebhookConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_vpcAdmissionWebhookConfigYaml,
		"vpc-admission-webhook-config.yaml",
	)
}

func vpcAdmissionWebhookConfigYaml() (*asset, error) {
	bytes, err := vpcAdmissionWebhookConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vpc-admission-webhook-config.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7d, 0x11, 0x23, 0x17, 0x2f, 0xdc, 0x4e, 0x18, 0xaa, 0xc8, 0x66, 0xee, 0xf3, 0xc1, 0x85, 0x63, 0xb1, 0xe3, 0x53, 0x57, 0x80, 0x96, 0xe6, 0x54, 0x26, 0x46, 0x6b, 0x3f, 0x17, 0x20, 0x31, 0x8}}
	return a, nil
}

var _vpcAdmissionWebhookCsrYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8d\x4b\x4e\xc4\x30\x10\x44\xf7\x3e\x45\x5f\x20\x41\xb3\x43\xde\x72\x03\x90\xd8\x77\xec\xc2\x69\x19\x7f\x70\xb7\x83\xe6\xf6\x28\x13\xa4\xd9\x95\xaa\x9e\x5e\x71\x97\x4f\x0c\x95\x56\x3d\x05\x0c\x93\x2f\x09\x6c\xd0\x35\xbf\xea\x2a\xed\xe5\xb8\x6d\x30\xbe\xb9\x2c\x35\x7a\x7a\x7b\x12\x1f\x92\xaa\xd4\xf4\x8e\x9f\x09\x35\x57\x60\x1c\xd9\xd8\x3b\xa2\xca\x05\x9e\x8e\x1e\x16\x8e\x45\xf4\x94\x2f\xbf\xd8\xf6\xd6\xf2\x9a\xe7\x86\x45\xef\x6a\x28\x4e\x3b\xc2\xc9\xa7\xd1\x66\xd7\x33\x2d\x74\x4d\x9e\xa7\xed\xa8\xf6\x78\x8a\x8e\x68\x2a\x27\xfc\x23\x51\x92\x18\x7f\x93\x4a\xaa\x6c\x73\xe0\xd1\x66\xdc\x09\x35\x48\xdf\x31\x0a\xaa\x5d\x36\x8c\x03\x83\x4e\x9b\xfb\x0b\x00\x00\xff\xff\xf1\x7d\x42\x97\xea\x00\x00\x00")

func vpcAdmissionWebhookCsrYamlBytes() ([]byte, error) {
	return bindataRead(
		_vpcAdmissionWebhookCsrYaml,
		"vpc-admission-webhook-csr.yaml",
	)
}

func vpcAdmissionWebhookCsrYaml() (*asset, error) {
	bytes, err := vpcAdmissionWebhookCsrYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vpc-admission-webhook-csr.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x56, 0xf4, 0x54, 0x57, 0xf8, 0xbd, 0x8a, 0x1a, 0x67, 0xb2, 0x29, 0x18, 0xe2, 0x44, 0x8a, 0xc2, 0x7f, 0x44, 0x26, 0x4c, 0x52, 0xe0, 0x70, 0xe0, 0xc8, 0x5a, 0x74, 0x76, 0x2, 0xcd, 0x3e, 0xa}}
	return a, nil
}

var _vpcAdmissionWebhookDepYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x93\xbf\x8e\xdb\x30\x0c\xc6\xf7\x3c\x05\x97\xf4\x26\xdb\xcd\xe1\xd0\x41\x40\x0a\x14\x2d\xba\xb4\xbd\x04\x0d\xd0\x9d\x91\x89\x44\xb0\xfe\x41\xa4\x9d\xfa\xed\x0b\xc5\xbe\xc2\xf6\x25\x77\x1a\x3c\x90\xfc\x7d\x14\x3f\x53\x18\xcd\x1f\x4a\x6c\x82\x57\x80\x31\x72\xd5\x6d\x56\x8d\xf1\xb5\x82\x6f\x14\x6d\xe8\x1d\x79\x59\x39\x12\xac\x51\x50\xad\x00\x3c\x3a\x52\xd0\x45\x5d\x60\xed\x0c\x67\xb2\xb8\xd0\xf1\x1c\x42\x33\x66\x39\xa2\x26\x05\x4d\x7b\xa4\x82\x7b\x16\x72\x2b\x00\x8b\x47\xb2\x9c\x05\x20\xf7\xb9\xa7\xc0\x91\x74\x2e\x4a\x14\xad\xd1\xc8\x0a\x36\x2b\x00\x96\x84\x42\xa7\x7e\xc0\xa5\x8f\xa4\xe0\x37\xe9\x44\x28\x94\xd3\x64\x49\x4b\x48\x43\xda\xa1\xe8\xf3\xcf\x49\xbb\x37\x1b\x02\x08\xb9\x68\x51\x68\xa4\x27\xa3\xe6\x63\x67\x42\xef\x48\x01\xbc\xdc\x3f\x1f\x1d\xbc\xa0\xf1\x94\x26\x78\xf1\x8e\x7f\xff\xdb\xa4\xd3\x84\x1a\xc8\x42\x2c\x7f\xa5\x24\xdf\x8d\xa5\x6d\x45\xa2\xab\x91\xab\x34\x25\xe1\xeb\xb7\x8c\x57\xb7\x97\xd8\x0f\xea\xef\x51\x0d\xf5\xb7\xa0\xdd\xe1\x6a\xe1\x61\xb4\x76\xd7\x51\x4a\xa6\xa6\xed\xc5\xf8\x3a\x5c\x78\x59\x8e\x96\x83\x0d\x27\x09\x2c\x35\xa5\xb4\x4c\x77\xdb\xa7\x45\xe8\xf1\xf3\x87\xcd\x24\x64\x1c\x9e\x48\xc1\xc3\x9a\xcb\xba\x49\x25\xe9\x54\xae\xb9\x5c\x73\x45\x0d\x57\x37\xcd\x52\xdd\xc7\xf2\xb1\x7c\x7a\x58\x8a\xec\x5b\x6b\xf7\xc1\x1a\xdd\x2b\xf8\x62\x2f\xd8\x4f\xef\xda\x05\xdb\x3a\xfa\x15\x5a\x2f\xaf\xec\x1d\x7e\xcc\xa8\x5e\x5c\xcd\x99\x55\x00\xb8\xcc\xed\x51\xce\x0a\x5e\x1b\xb9\xa8\x4d\x84\xf5\xce\xdb\x5e\x81\xa4\x96\xc6\xe4\x39\xb0\x3c\x93\x5c\x42\x6a\x66\x71\x1f\x6a\x3a\xcc\x96\x38\x9f\x23\x09\x96\xf9\x15\x25\x4f\x42\x5c\x9a\x50\x05\x56\x60\x8d\x6f\xff\xbe\x55\x84\x49\x9f\x15\xa0\xab\x3f\xbd\x98\x3e\x8c\x7d\x63\x0d\xef\x4d\xcb\xf9\x71\xc9\xdc\xa1\x21\xf6\x7c\x7f\x7d\x47\x95\x7f\x01\x00\x00\xff\xff\xe1\x3a\x01\x42\x52\x04\x00\x00")

func vpcAdmissionWebhookDepYamlBytes() ([]byte, error) {
	return bindataRead(
		_vpcAdmissionWebhookDepYaml,
		"vpc-admission-webhook-dep.yaml",
	)
}

func vpcAdmissionWebhookDepYaml() (*asset, error) {
	bytes, err := vpcAdmissionWebhookDepYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vpc-admission-webhook-dep.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb9, 0xc6, 0x83, 0xd1, 0x8d, 0x3e, 0x9c, 0x6, 0xa7, 0x56, 0x5d, 0x1a, 0x1f, 0xf, 0x58, 0x39, 0x30, 0x3, 0xa4, 0x46, 0xe, 0x66, 0xb6, 0xb5, 0x9f, 0x8d, 0xa8, 0xba, 0x9e, 0x51, 0x67, 0xb6}}
	return a, nil
}

var _vpcAdmissionWebhookYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8c\x31\xae\xc2\x40\x0c\x05\xfb\x3d\x85\x2f\xe0\xe2\xeb\xa7\xf2\x29\x90\x90\xe8\x9d\xcd\x13\xac\x92\xcd\x5a\x6b\x13\xc4\xed\x51\x22\x0a\x1a\x44\x67\xf9\xcd\x0c\x33\x27\xb5\x72\x41\xf7\xd2\x56\xa1\xed\x2f\xcd\x65\x9d\x84\xce\xe8\x5b\xc9\x48\x15\xa1\x93\x86\x4a\x22\x5a\xb5\x42\x68\xb3\xcc\x3a\xd5\xe2\xbb\xc1\x0f\x8c\xb7\xd6\xe6\xf7\xea\xa6\x19\x42\xf3\x7d\x04\xfb\xd3\x03\x35\x11\x2d\x3a\x62\xf1\x3d\x40\xa4\x66\xdf\x0a\x6e\xc8\x3b\x64\xad\xc7\x41\xf3\x71\x0a\x0d\xc3\xff\xe1\x86\xf6\x2b\xe2\xf4\xf1\x73\x2c\xc8\xd1\xfa\xcf\xf6\x2b\x00\x00\xff\xff\xbc\xa7\x78\x3e\xe7\x00\x00\x00")

func vpcAdmissionWebhookYamlBytes() ([]byte, error) {
	return bindataRead(
		_vpcAdmissionWebhookYaml,
		"vpc-admission-webhook.yaml",
	)
}

func vpcAdmissionWebhookYaml() (*asset, error) {
	bytes, err := vpcAdmissionWebhookYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vpc-admission-webhook.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc0, 0x14, 0x3e, 0x68, 0x1c, 0x57, 0x26, 0x7e, 0x3b, 0xab, 0xf1, 0x55, 0x21, 0x61, 0xc3, 0xe1, 0xaf, 0x46, 0xb6, 0xf7, 0xdd, 0x11, 0x29, 0x41, 0x64, 0x57, 0xc8, 0xd4, 0xea, 0x97, 0xba, 0xff}}
	return a, nil
}

var _vpcResourceControllerDepYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\x41\x6b\xdc\x3e\x10\xc5\xef\xfe\x14\x73\x09\x39\xd9\xde\xcd\x3f\xff\x84\x0a\x7a\x08\x0d\xb4\x87\x52\x16\x12\x7a\x1f\x4b\x93\x58\x58\x96\xc4\xcc\xd8\x1b\xf7\xd3\x17\xb7\xd9\x5d\x9b\xa6\xd9\xce\xc9\xbc\x9f\xc6\xef\x8d\xd0\x94\x65\x59\x60\xf6\xdf\x89\xc5\xa7\x68\x00\x73\x96\x7a\xdc\x16\x9d\x8f\xce\xc0\x3d\xe5\x90\xa6\x9e\xa2\x16\x3d\x29\x3a\x54\x34\x05\x40\xc4\x9e\x0c\x8c\xd9\x96\x4c\x92\x06\xb6\x54\xda\x14\x95\x53\x08\xc4\xaf\x5c\x32\x5a\x32\xd0\x0d\x0d\x95\x32\x89\x52\x5f\x48\x26\x3b\xb7\x33\xe5\xe0\x2d\x8a\x81\x6d\x01\x20\x14\xc8\x6a\xe2\x99\x00\xf4\xa8\xb6\xfd\x8a\x0d\x05\xf9\x2d\xc0\x1c\xe9\x3d\xb3\xb9\xd4\x13\x1b\x68\xd0\x76\x14\xdd\x41\x63\xb4\x9d\x01\x51\x6c\x02\x15\x00\x4a\x7d\x0e\xa8\xf4\xea\xb3\x18\x67\xae\xb0\xb2\xfc\x27\xd3\xb7\x6d\xff\x34\x06\x38\x0c\xfe\xeb\x9b\x78\xf4\x96\xee\xac\x4d\x43\xd4\x73\x1e\xb3\x80\x3e\x12\x1f\xa3\x95\x60\x53\xdf\x63\x74\xa7\xac\x25\xd4\xe7\x92\x22\x3f\xcb\xb2\xa1\x14\x75\xc4\xac\x2d\x93\xb4\x29\xb8\x8f\x3e\x3e\xa5\x23\xf7\x3d\x3e\x93\x81\xcb\x0b\xa9\x5c\xc7\x15\x59\xae\x2e\xa4\xba\x90\x9a\x3a\xa9\xf7\x3e\xba\xb4\x97\xf2\x2f\x96\x66\xdc\x54\x57\xd5\xf5\xe5\xfa\x67\xbb\x21\x84\x5d\x0a\xde\x4e\x06\xee\xc2\x1e\x27\x39\xf2\xe0\x47\x8a\x24\xb2\xe3\xd4\xd0\x29\x23\xc0\x13\xfa\x30\x30\x3d\x1e\x32\x1a\xf8\x7f\x41\x5b\xd5\xfc\x99\x74\xd9\x00\xd0\x26\x51\x03\xdb\xab\xdb\x6a\x53\x6d\xaa\xed\x8a\x65\xd4\xd6\x40\xdd\x12\x06\x6d\x7f\xac\x51\x62\x35\x70\xb3\xbd\xbd\xfd\xb0\xd2\xc5\xb6\x34\xbf\xf4\x2f\x8f\x8f\xbb\x05\xf0\xd1\xab\xc7\x70\x4f\x01\xa7\x07\xb2\x29\x3a\x31\xf0\xdf\x66\x71\x22\x13\xfb\xe4\xde\x66\xea\x7b\x4a\x83\x1e\xe1\x69\xa8\x73\x6b\x75\x78\x40\x76\x60\xaf\xd3\xa7\x14\x95\x5e\x56\x17\x90\xd9\x8f\x3e\xd0\x33\x39\x03\xca\x03\x15\xa7\x5b\xf9\x46\xba\x4f\xdc\xad\xf4\x98\x1c\x3d\xac\xb6\x6f\xae\x86\x14\xab\x79\x6d\x39\x92\x92\x54\x3e\xd5\x49\x0c\x04\x1f\x87\x97\xf7\x0e\x21\xdb\xd6\x00\xf6\xee\xe6\xba\xf8\x19\x00\x00\xff\xff\xc0\x2f\xdb\x68\x56\x04\x00\x00")

func vpcResourceControllerDepYamlBytes() ([]byte, error) {
	return bindataRead(
		_vpcResourceControllerDepYaml,
		"vpc-resource-controller-dep.yaml",
	)
}

func vpcResourceControllerDepYaml() (*asset, error) {
	bytes, err := vpcResourceControllerDepYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vpc-resource-controller-dep.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3d, 0x55, 0x7, 0xe, 0xad, 0xaf, 0x80, 0xb9, 0xe, 0xa7, 0x8e, 0x5b, 0xaa, 0x37, 0x24, 0xda, 0x64, 0x6f, 0x9d, 0xa7, 0xb6, 0xb2, 0x58, 0x6b, 0xbb, 0x35, 0x95, 0x85, 0x39, 0xdd, 0x4d, 0xb8}}
	return a, nil
}

var _vpcResourceControllerYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\x31\x4f\x33\x31\x0c\x86\xf7\xfc\x8a\xa8\x7b\x5a\x7d\xdb\xa7\xdb\x80\x81\xbd\x48\xec\x3e\x9f\xdb\x9a\xe6\xe2\xc8\x76\x0e\xc1\xaf\x47\x77\xd7\xc2\x80\x44\x85\x98\xf2\xc4\xf6\x6b\x4b\x4f\x4a\x29\x40\xe5\x67\x52\x63\x29\x5d\xd4\x1e\x70\x0b\xcd\x4f\xa2\xfc\x0e\xce\x52\xb6\xe7\xff\xb6\x65\xd9\x4d\xff\xc2\x99\xcb\xd0\xc5\x87\xdc\xcc\x49\xf7\x92\x29\x8c\xe4\x30\x80\x43\x17\x62\x2c\x30\x52\x17\xa7\x8a\x49\xc9\xa4\x29\x52\x42\x29\xae\x92\x33\x69\xd0\x96\xc9\xba\x90\x22\x54\x7e\x54\x69\xd5\xe6\x4c\x8a\x9b\x4d\x88\xf1\x1a\xb8\xd4\x8a\x0c\x64\x5f\xb4\x33\x07\x6f\x6b\xa1\xca\xb0\x02\x4a\x39\xf0\x71\x84\x3a\x7f\x27\xd2\xfe\x92\x6d\x75\x00\xa7\x05\x8f\xe4\xcb\x9b\xd9\x56\x78\x05\xc7\xd3\xba\xe6\x93\x50\x69\x9e\xff\x9b\x87\x7b\x2e\x03\x97\xe3\x6f\x74\x48\xa6\x3d\x1d\xe6\xc1\xab\x90\x1f\x8e\x86\x18\xbf\xbb\xbf\x75\xc2\x5a\xff\x42\xe8\x8b\xf4\x35\xfd\x44\x3a\x31\xd2\x1d\xa2\xb4\xe2\x37\x17\xac\x7d\xab\x80\xd4\xc5\x73\xeb\x29\xd9\x9b\x39\x8d\xe1\x23\x00\x00\xff\xff\x83\x2e\x8d\x64\x35\x02\x00\x00")

func vpcResourceControllerYamlBytes() ([]byte, error) {
	return bindataRead(
		_vpcResourceControllerYaml,
		"vpc-resource-controller.yaml",
	)
}

func vpcResourceControllerYaml() (*asset, error) {
	bytes, err := vpcResourceControllerYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vpc-resource-controller.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa8, 0xff, 0xd2, 0xc, 0x46, 0xfb, 0xe4, 0x4e, 0xb, 0x26, 0x4a, 0xa0, 0x7d, 0x73, 0x5e, 0xaf, 0x6d, 0xab, 0xfd, 0xe5, 0xc2, 0x4f, 0xed, 0xae, 0xb6, 0xd7, 0x17, 0x38, 0x68, 0xb0, 0xe8, 0x2d}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"neuron-device-plugin.yaml":         neuronDevicePluginYaml,
	"nvidia-device-plugin.yaml":         nvidiaDevicePluginYaml,
	"spot-ocean-controller.yaml":        spotOceanControllerYaml,
	"vpc-admission-webhook-config.yaml": vpcAdmissionWebhookConfigYaml,
	"vpc-admission-webhook-csr.yaml":    vpcAdmissionWebhookCsrYaml,
	"vpc-admission-webhook-dep.yaml":    vpcAdmissionWebhookDepYaml,
	"vpc-admission-webhook.yaml":        vpcAdmissionWebhookYaml,
	"vpc-resource-controller-dep.yaml":  vpcResourceControllerDepYaml,
	"vpc-resource-controller.yaml":      vpcResourceControllerYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"neuron-device-plugin.yaml":         &bintree{neuronDevicePluginYaml, map[string]*bintree{}},
	"nvidia-device-plugin.yaml":         &bintree{nvidiaDevicePluginYaml, map[string]*bintree{}},
	"spot-ocean-controller.yaml":        &bintree{spotOceanControllerYaml, map[string]*bintree{}},
	"vpc-admission-webhook-config.yaml": &bintree{vpcAdmissionWebhookConfigYaml, map[string]*bintree{}},
	"vpc-admission-webhook-csr.yaml":    &bintree{vpcAdmissionWebhookCsrYaml, map[string]*bintree{}},
	"vpc-admission-webhook-dep.yaml":    &bintree{vpcAdmissionWebhookDepYaml, map[string]*bintree{}},
	"vpc-admission-webhook.yaml":        &bintree{vpcAdmissionWebhookYaml, map[string]*bintree{}},
	"vpc-resource-controller-dep.yaml":  &bintree{vpcResourceControllerDepYaml, map[string]*bintree{}},
	"vpc-resource-controller.yaml":      &bintree{vpcResourceControllerYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
